plugins {
    id 'java'
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    jcenter()
}

version = '1-SNAPSHOT'

sourceCompatibility = '11'

ext {
    versions = [:]
}

versions.slf4j = '2.0.5'
versions.commons_cli = '1.5.0'
versions.jetty = '11.0.14'
versions.httpclient4 = '4.5.14'
versions.httpasyncclient4 = '4.1.4'
versions.httpclient5 = '5.2.1'
versions.okhttp3 = '4.10.0'
versions.spring_webflux2 = '2.7.6' // 2.x version is intentionally used here
                                   // as it is the last version that uses Netty
                                   // as its backend. In the future it might
                                   // be replaced by straight Netty

dependencies {
    implementation("commons-cli:commons-cli:${versions.commons_cli}")
    implementation("org.eclipse.jetty:jetty-client:${versions.jetty}")
    implementation("org.slf4j:slf4j-api:${versions.slf4j}")
    implementation("org.slf4j:slf4j-nop:${versions.slf4j}")
    implementation("org.apache.httpcomponents:httpclient:${versions.httpclient4}")
    implementation("org.apache.httpcomponents:httpasyncclient:${versions.httpasyncclient4}")
    implementation("org.apache.httpcomponents.client5:httpclient5:${versions.httpclient5}")
    implementation("org.springframework.boot:spring-boot-starter-webflux:${versions.spring_webflux2}") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation("com.squareup.okhttp3:okhttp:${versions.okhttp3}")
}

def targetUri = project.hasProperty('benchmark.target-uri') ? project.'benchmark.target-uri' : null
def n = project.hasProperty('benchmark.requests') ? project.'benchmark.requests' : 2000
def c = project.hasProperty('benchmark.concurrency') ? project.'benchmark.concurrency' : 2
def content = project.hasProperty('benchmark.content-file') ? project.'benchmark.content-file' : null
def contentType = project.hasProperty('benchmark.content-type') ? project.'benchmark.content-type' : 'text/plain'

task benchmark(dependsOn: 'classes') {
    doLast {

        def agents = [
                'JREHttpUrlConnection',
                'ApacheHttpClientV4',
                'ApacheHttpClientV5',
                'JRE11HttpClient',
                'JettyHttpClientV11',
                'OkHttpClientV4',
                'SpringWebFluxV2',
                'ApacheHttpAsyncClientV4',
                'ApacheHttpAsyncClientV5',
        ]

        def params = ['-n', "${n}", '-c', "${c}", '-k']
        if (content) {
            params += ['-p', content, '-t', contentType]
        }
        params += targetUri

        agents.each { agent ->
            javaexec {
                main = "com.ok2c.http.client.benchmark.${agent}"
                classpath = sourceSets.main.runtimeClasspath
                args = params
            }
            sleep(2000)
        }
    }
}

defaultTasks 'clean', 'benchmark'
